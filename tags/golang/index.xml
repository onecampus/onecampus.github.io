<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Onecampus T.D.</title>
    <link>http://onecampus.github.io/tags/golang/</link>
    <description>Recent content in Golang on Onecampus T.D.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 11 Sep 2015 16:00:16 +0800</lastBuildDate>
    <atom:link href="http://onecampus.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android右滑关闭当前页面实现 by fostion</title>
      <link>http://onecampus.github.io/Android%E5%8F%B3%E6%BB%91%E5%85%B3%E9%97%AD%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0%20by%20fostion/</link>
      <pubDate>Fri, 11 Sep 2015 16:00:16 +0800</pubDate>
      
      <guid>http://onecampus.github.io/Android%E5%8F%B3%E6%BB%91%E5%85%B3%E9%97%AD%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0%20by%20fostion/</guid>
      <description>

&lt;h2 id=&#34;viewdraghelper介绍:12e2a8ca259c2875a3b1a12e6233ec76&#34;&gt;ViewDragHelper介绍&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ViewDragHelper 是官方提供我们简单处理ViewGroup内部拖动某个子view处理，同时还可以多手指处理、加速度检测
等,用于代替onInterceptTouchEvent和onTouchEvent处理一些复杂的问题.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;viewdraghelper使用:12e2a8ca259c2875a3b1a12e6233ec76&#34;&gt;ViewDragHelper使用&lt;/h2&gt;

&lt;h4 id=&#34;拦截触碰事件:12e2a8ca259c2875a3b1a12e6233ec76&#34;&gt;拦截触碰事件：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    @Override
    public boolean onInterceptTouchEvent(MotionEvent ev) {
        return mViewDragHelper != null ? mViewDragHelper.shouldInterceptTouchEvent(ev) 
                                                          : super.onInterceptTouchEvent(ev);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (mViewDragHelper != null) {
            mViewDragHelper.processTouchEvent(event);
        }
        return true;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;这里我们拦截所有事件，其实可以根据实际需要拦截相应的事件。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;事件处理:12e2a8ca259c2875a3b1a12e6233ec76&#34;&gt;事件处理&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    @Override
      public boolean tryCaptureView(View child, int pointerId) {
       return child == mContentView;//只有第一个子view才可以移动
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;截取事件后我们可根据需要判断是否处理，返回true就是处理view&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        super.onLayout(changed, l, t, r, b);
        //获取需要拖动的宽度
        mContentWidth = mContentView.getWidth();
    }

    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();
        if (getChildCount() != 1) {
            throw new IllegalStateException(&amp;quot;SwipeBackLayout only have one child view&amp;quot;);
        }
        mContentView = getChildAt(0);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;获得滑动的view,同时确保必须要只包含一个子view，去报拖动整个view&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    /**
     * 记录向左移动的值
     */
    @Override
    public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) {
    mMoveLeft = left;
    if (isClose &amp;amp;&amp;amp; (left == mContentWidth)) {
    if (mDragCallBack != null) {
        mDragCallBack.onDrag();
            }
          }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果当前状态是关闭状态且左边的值等于滑动的View的宽度，也就是说当前的界面已经滑出屏幕后，通知activity可以finish了&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    /**
     * 手指释放view触发效果：
     * 若是距离不够就弹回去
     */
    @Override
      public void onViewReleased(View releasedChild, float xvel, float yvel) {
      //借助computeScroll方法 移动距离大于四分之一将会关闭否则弹回
      if (mMoveLeft &amp;gt;= (mContentWidth / 4)) {
          //划出屏幕
          isClose = true;
          mViewDragHelper.settleCapturedViewAt(mContentWidth, releasedChild.getTop());
       } else {
           //返回原来位置
            isClose = false;
            mViewDragHelper.settleCapturedViewAt(0, releasedChild.getTop());
            }
            invalidate();
       }

      @Override
      public int clampViewPositionHorizontal(View child, int left, int dx) {
         return Math.min(mContentWidth, Math.max(left, 0));
      }

      @Override
         public int getViewHorizontalDragRange(View child) {
         return mContentWidth;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;设置滑动的区域和手指离开屏幕后的处理&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    @Override
    public void computeScroll() {
        super.computeScroll();
        if (mViewDragHelper != null &amp;amp;&amp;amp; mViewDragHelper.continueSettling(true)) {
            invalidate();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;计算根据抬手后的位置滑动到需要滑动的位置，并刷新&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    backLayout.setDragCallBack(new SwipeBackLayout.DragCallBack() {
            @Override
            public void onDrag() {
                finish();
            }
     });
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;处理回调，结束当前页面&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最后Activity主题添加
&lt;code&gt;
&amp;lt;item name=&amp;quot;android:windowIsTranslucent&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt;
&amp;lt;item name=&amp;quot;android:windowBackground&amp;quot;&amp;gt;@android:color/transparent&amp;lt;/item&amp;gt;
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;显示就没有白色背景了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;效果图&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../fostion_result1.png&#34; alt=&#34;xiaoguotupian&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>