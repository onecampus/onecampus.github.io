<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Onecampus T.D.</title>
    <link>http://onecampus.github.io/tags/development/</link>
    <description>Recent content in Development on Onecampus T.D.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 27 Nov 2015 16:00:16 +0800</lastBuildDate>
    <atom:link href="http://onecampus.github.io/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>iOS 运行时的黑魔法 by sleeping</title>
      <link>http://onecampus.github.io/iOS%20%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E9%BB%91%E9%AD%94%E6%B3%95%20by%20sleeping/</link>
      <pubDate>Fri, 27 Nov 2015 16:00:16 +0800</pubDate>
      
      <guid>http://onecampus.github.io/iOS%20%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E9%BB%91%E9%AD%94%E6%B3%95%20by%20sleeping/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;”Method swizzling指的是改变一个已存在的选择器对应的实现的过程，它依赖于Objectvie-C中方法的调用能够在运行时进改变——通过改变类的调度表（dispatch table）中选择器到最终函数间的映射关系。“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;举个例子，假设我们想跟踪在一个iOS应用中每个视图控制器展现给用户的次数：&lt;/p&gt;

&lt;p&gt;我们可以给每个视图控制器对应的viewWillAppear:实现方法中增加相应的跟踪代码，但是这样做会产生大量重复的代码。子类化可能是另一个选择，但要求你将UIViewController、 UITableViewController、 UINavigationController 以及所有其他视图控制器类都子类化，这也会导致代码重复。&lt;/p&gt;

&lt;p&gt;幸好，还有另一个方法，在分类中进行method swizzling，下面来看怎么做：&lt;/p&gt;

&lt;p&gt;在计算机学科中，指针变换（pointer swizzling）是指将基于名字或位置的引用转变为直接的指针引用。 然而在Objective-C中，这个词的起源并不完全知道，但关于这一借鉴其实也很好理解，method swizzling可以通过选择器来改变它引用的函数指针。&lt;/p&gt;

&lt;p&gt;现在，当UIViewController或它子类的任何实例触发viewWillAppear:方法都会打印一条log日志。&lt;/p&gt;

&lt;p&gt;向视图控制器的生命周期中注入操作、事件的响应、视图的绘制，或Foundation中的网络堆栈都是能够利用method swizzling产生明显效果的场景。还有一些其他的场景使用swizzling会是一个合适的选择，这随着Objective-C开发者经验不断丰富会变得越来越明显。&lt;/p&gt;

&lt;p&gt;先不说为什么和在哪些地方使用swizzling，来看一下应该怎样实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    1   #import &amp;lt;objc/runtime.h&amp;gt; 
    2    
    3   @implementation UIViewController (Tracking) 
    4    
    5   + (void)load { 
    6       static dispatch_once_t onceToken; 
    7       dispatch_once(&amp;amp;onceToken, ^{ 
    8           Class class = [self class]; 
    9    
    10          // When swizzling a class method, use the following: 
    11          // Class class = object_getClass((id)self); 
    12   
    13          SEL originalSelector = @selector(viewWillAppear:); 
    14          SEL swizzledSelector = @selector(xxx_viewWillAppear:); 
    15   
    16          Method originalMethod = class_getInstanceMethod(class, originalSelector); 
    17          Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector); 
    18   
    19          BOOL didAddMethod = 
    20              class_addMethod(class, 
    21                  originalSelector, 
    22                  method_getImplementation(swizzledMethod), 
    23                  method_getTypeEncoding(swizzledMethod)); 
    24   
    25          if (didAddMethod) { 
    26              class_replaceMethod(class, 
    27                  swizzledSelector, 
    28                  method_getImplementation(originalMethod), 
    29                  method_getTypeEncoding(originalMethod)); 
    30          } else { 
    31              method_exchangeImplementations(originalMethod, swizzledMethod); 
    32          } 
    33      }); 
    34  } 
    35   
    36  #pragma mark - Method Swizzling 
    37   
    38  - (void)xxx_viewWillAppear:(BOOL)animated { 
    39      [self xxx_viewWillAppear:animated]; 
    40      NSLog(@&amp;quot;viewWillAppear: %@&amp;quot;, self); 
    41  } 
    42   
    43  @end 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;+load vs. +initialize&lt;/p&gt;

&lt;p&gt;Swizzling应该在+load方法中实现。&lt;/p&gt;

&lt;p&gt;Swizzling应该在+load方法中实现。
每个类的这两个方法会被Objective-C运行时系统自动调用，+load是在一个类最开始加载时调用，+initialize是在应用中第一次调用该类或它的实例的方式之前调用。这两个方法都是可选的，只有实现了才会被执行。&lt;/p&gt;

&lt;p&gt;因为method swizzling会影响全局，所以减少冒险情况就很重要。+load能够保证在类初始化的时候就会被加载，这为改变系统行为提供了一些统一性。但+initialize并不能保证在什么时候被调用——事实上也有可能永远也不会被调用，例如应用程序从未直接的给该类发送消息。&lt;/p&gt;

&lt;p&gt;dispatch_once
Swizzling应该在dispatch_once中实现。
 
还是因为swizzling会改变全局，我们需要在运行时采取所有可用的防范措施。保障原子性就是一个措施，它确保代码即使在多线程环境下也只会被执行一次。GCD中的diapatch_once就提供这些保障，它应该被当做swizzling的标准实践。&lt;/p&gt;

&lt;h2 id=&#34;选择器-方法及实现:28fe0b77f5108a1798883e2de2677997&#34;&gt;选择器、方法及实现&lt;/h2&gt;

&lt;p&gt;在Objective-C中，尽管这些词经常被放在一起来描述消息传递的过程，但选择器、方法及实现分别代表运行时的不同方面。
下面是苹果Objective-C Runtime Reference文档中对它们的描述:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;选择器（typedef struct objc_selector *SEL）：选择器用于表示一个方法在运行时的名字，一个方法的选择器是一个注册到（或映射到）Objective-C运行时中的C字符串，它是由编译器生成并在类加载的时候被运行时系统自动映射。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法（typedef struct objc_method *Method）：一个代表类定义中一个方法的不明类型。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;实现（typedef id (*IMP)(id, SEL, &amp;hellip;)）：这种数据类型是实现某个方法的函数开始位置的指针，函数使用的是基于当前CPU架构的标准C调用规约。第一个参数是指向self的指针（也就是该类的某个实例的内存空间，或者对于类方法来说，是指向元类（metaclass）的指针）。第二个参数是方法的选择器，后面跟的都是参数。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;理解这些概念之间关系最好的方式是：一个类（Class）维护一张调度表（dispatch table）用于解析运行时发送的消息；调度表中的每个实体（entry）都是一个方法（Method），其中key值是一个唯一的名字——选择器（SEL），它对应到一个实现（IMP）——实际上就是指向标准C函数的指针。&lt;/p&gt;

&lt;p&gt;Method Swizzling就是改变类的调度表让消息解析时从一个选择器对应到另外一个的实现，同时将原始的方法实现混淆到一个新的选择器。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;调用-cmd:28fe0b77f5108a1798883e2de2677997&#34;&gt;调用_cmd&lt;/h4&gt;

&lt;p&gt;下面这段代码看起来像是会导致一个死循环：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    1   - (void)xxx_viewWillAppear:(BOOL)animated { 
    2       [self xxx_viewWillAppear:animated]; 
    3       NSLog(@&amp;quot;viewWillAppear: %@&amp;quot;, NSStringFromClass([self class])); 
    4   } 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但其实并没有，在Swizzling的过程中，xxx_viewWillAppear:会被重新分配给UIViewController的-viewWillAppear:的原始实现。一个优秀程序员应有的直觉会告诉你在一个方法的实现中通过self调用当前方法自身会产生错误，但是在当前这种情况下，如果我们记住到底是怎么回事更有意义。反而，如果我们在这个方法中调用viewWillAppear:才会真的导致死循环，因为这个方法的实现会在运行时被swizzle到viewWillAppear:的选择器。
 
记住给swizzled方法加上前缀，这和你需要给可能产生冲突的分类方法加前缀是一个道理。&lt;/p&gt;

&lt;h4 id=&#34;注意事项:28fe0b77f5108a1798883e2de2677997&#34;&gt;注意事项&lt;/h4&gt;

&lt;p&gt;Swizzling被普遍认为是一种巫术，容易导致不可预料的行为和结果。尽管不是最安全的，但是如果你采取下面这些措施，method swizzling还是很安全的。&lt;/p&gt;

&lt;p&gt;1.始终调用方法的原始实现（除非你有足够的理由不这么做）： API为输入和输出提供规约，但它里面具体的实现其实是个黑匣子，在Method Swizzling过程中不调用它原始的实现可能会破坏一些私有状态，甚至是程序的其他部分。&lt;/p&gt;

&lt;p&gt;2.避免冲突：给分类方法加前缀，一定要确保不要让你代码库中其他代码（或是依赖库）在做与你相同的事。&lt;/p&gt;

&lt;p&gt;3.理解：只是简单的复制粘贴swizzling代码而不去理解它是怎么运行的，这不仅非常危险，而且还浪费了学习Objective-C运行时的机会。阅读 Objective-C Runtime Reference 和 &lt;objc/rumtime.h&gt; 去理解代码是怎样和为什么这样执行的，努力的用你的理解来消灭你的疑惑。&lt;/p&gt;

&lt;p&gt;谨慎行事：不管你多么自信你能够swizzling Foundation、UIKit 或者其他内置框架，请记住所有这些都可能在下一个版本中就不好使。提前做好准备，防范于未然才不至于到时候焦头烂额。&lt;/p&gt;

&lt;p&gt;不敢放心大胆的直接使用Objective-C运行时？Jonathan ‘Wolf’ Rentzsch提供了经过实战检验的、支持CocoaPads的库JRSwizzle，它会为你考虑好了一切。
Have Fun！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>网页弹性按钮(纯css3) by zhou</title>
      <link>http://onecampus.github.io/%E7%BD%91%E9%A1%B5%E5%BC%B9%E6%80%A7%E6%8C%89%E9%92%AE/</link>
      <pubDate>Sun, 25 Oct 2015 15:55:29 +0800</pubDate>
      
      <guid>http://onecampus.github.io/%E7%BD%91%E9%A1%B5%E5%BC%B9%E6%80%A7%E6%8C%89%E9%92%AE/</guid>
      <description>

&lt;h2 id=&#34;网页中弹性按钮设计-纯css:e2661edcf3ad09a929f3c6c9ad328c35&#34;&gt;网页中弹性按钮设计(纯CSS)&lt;/h2&gt;

&lt;p&gt;效果如下：
&lt;img src=&#34;../btn.gif&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;思路:e2661edcf3ad09a929f3c6c9ad328c35&#34;&gt;思路&lt;/h4&gt;

&lt;p&gt;其中包含2个动效，第一个是按钮中心的颜色扩散，第二个是按钮弹性收缩。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一个颜色扩散：按钮分为了两层，第一层是按钮本身，第二层是按钮的为元素:before，&lt;strong&gt;注意按钮before是这个效果的重点，通过hover动作触发按钮before层的扩散&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;第二个弹性收缩：需要使用@keyframes设计动画的效果。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;两个动画独立完成后，重叠在一起的话，需要调整动画的时间及效果。&lt;/p&gt;

&lt;h4 id=&#34;代码分析:e2661edcf3ad09a929f3c6c9ad328c35&#34;&gt;代码分析&lt;/h4&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;bottle&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;hvr-rectangle-out hvr-pop&amp;quot; href=&amp;quot;javascript:void(0)&amp;quot;&amp;gt;1&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bottle&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;hvr-rectangle-out hvr-pop&amp;quot; href=&amp;quot;javascript:void(0)&amp;quot;&amp;gt;2&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bottle&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;hvr-rectangle-out hvr-pop&amp;quot; href=&amp;quot;javascript:void(0)&amp;quot;&amp;gt;3&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bottle&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;hvr-rectangle-out hvr-pop&amp;quot; href=&amp;quot;javascript:void(0)&amp;quot;&amp;gt;4&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bottle&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;hvr-rectangle-out hvr-pop&amp;quot; href=&amp;quot;javascript:void(0)&amp;quot;&amp;gt;5&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/*按钮基础样式*/
.bottle {
  display: block;
  width: 50px;
  height: 50px;
  margin-bottom: 5px;
}
.bottle a {
  text-decoration: none;
  color: gray;
}
/*颜色扩散动效部分*/
.hvr-rectangle-out {
  display: inline-block;
  vertical-align: middle;
  transform: translateZ(0);
  box-shadow: 0 0 1px rgba(0, 0, 0, 0);
  backface-visibility: hidden;
  position: relative;
  background-color: #fafafa;
  transition-property: color;
  transition-duration: 0.3s;
}
/*:before这个是颜色扩散动效的重点*/
.hvr-rectangle-out:before {
  content: &amp;quot;&amp;quot;;
  position: absolute;
  z-index: -1;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  transform: scale(0.5);
  transition-property: transform;
  transition-duration: 0.2s;
  transition-timing-function: ease-out;
}
.hvr-rectangle-out:hover,
.hvr-rectangle-out:focus,
.hvr-rectangle-out:active {
  color: white; /*颜色扩散时候，字体改变颜色*/
}
.hvr-rectangle-out:hover:before,
.hvr-rectangle-out:focus:before,
.hvr-rectangle-out:active:before {
  background: #2098d1;
  transform: scale(1); /*hover触发:before层的扩散*/
}

/*弹性收缩动效部分*/
/*使用keyframes定义弹性动画
  1是原来的比例扩散到1.05倍的比例，再缩回1倍原来的比例*/
@keyframes hvr-pop {
  25% {
    -webkit-transform: scale(1);
    transform: scale(1);
  }
  50% {
    -webkit-transform: scale(1);
    transform: scale(1);
  }
  75% {
    -webkit-transform: scale(1.05);
    transform: scale(1.05);
  }
  100% {
    -webkit-transform: scale(1);
    transform: scale(1);
  }
}
.hvr-pop {
  display: inline-block;
  vertical-align: middle;
  transform: translateZ(0);
  box-shadow: 0 0 1px rgba(0, 0, 0, 0);
  backface-visibility: hidden;
  width: 50px;
  height: 50px;
  text-align: center;
  line-height: 50px;
}
.hvr-pop:hover, .hvr-pop:focus, .hvr-pop:active {
  animation-name: hvr-pop;
  animation-duration: 0.3s;
  animation-timing-function: linear;
  animation-iteration-count: 1;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android右滑关闭当前页面实现 by fostion</title>
      <link>http://onecampus.github.io/Android%E5%8F%B3%E6%BB%91%E5%85%B3%E9%97%AD%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0%20by%20fostion/</link>
      <pubDate>Fri, 11 Sep 2015 16:00:16 +0800</pubDate>
      
      <guid>http://onecampus.github.io/Android%E5%8F%B3%E6%BB%91%E5%85%B3%E9%97%AD%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0%20by%20fostion/</guid>
      <description>

&lt;h2 id=&#34;viewdraghelper介绍:12e2a8ca259c2875a3b1a12e6233ec76&#34;&gt;ViewDragHelper介绍&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ViewDragHelper 是官方提供我们简单处理ViewGroup内部拖动某个子view处理，同时还可以多手指处理、加速度检测
等,用于代替onInterceptTouchEvent和onTouchEvent处理一些复杂的问题.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;viewdraghelper使用:12e2a8ca259c2875a3b1a12e6233ec76&#34;&gt;ViewDragHelper使用&lt;/h2&gt;

&lt;h4 id=&#34;拦截触碰事件:12e2a8ca259c2875a3b1a12e6233ec76&#34;&gt;拦截触碰事件：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    @Override
    public boolean onInterceptTouchEvent(MotionEvent ev) {
        return mViewDragHelper != null ? mViewDragHelper.shouldInterceptTouchEvent(ev) 
                                                          : super.onInterceptTouchEvent(ev);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (mViewDragHelper != null) {
            mViewDragHelper.processTouchEvent(event);
        }
        return true;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;这里我们拦截所有事件，其实可以根据实际需要拦截相应的事件。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;事件处理:12e2a8ca259c2875a3b1a12e6233ec76&#34;&gt;事件处理&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    @Override
      public boolean tryCaptureView(View child, int pointerId) {
       return child == mContentView;//只有第一个子view才可以移动
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;截取事件后我们可根据需要判断是否处理，返回true就是处理view&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        super.onLayout(changed, l, t, r, b);
        //获取需要拖动的宽度
        mContentWidth = mContentView.getWidth();
    }

    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();
        if (getChildCount() != 1) {
            throw new IllegalStateException(&amp;quot;SwipeBackLayout only have one child view&amp;quot;);
        }
        mContentView = getChildAt(0);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;获得滑动的view,同时确保必须要只包含一个子view，去报拖动整个view&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    /**
     * 记录向左移动的值
     */
    @Override
    public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) {
    mMoveLeft = left;
    if (isClose &amp;amp;&amp;amp; (left == mContentWidth)) {
    if (mDragCallBack != null) {
        mDragCallBack.onDrag();
            }
          }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果当前状态是关闭状态且左边的值等于滑动的View的宽度，也就是说当前的界面已经滑出屏幕后，通知activity可以finish了&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    /**
     * 手指释放view触发效果：
     * 若是距离不够就弹回去
     */
    @Override
      public void onViewReleased(View releasedChild, float xvel, float yvel) {
      //借助computeScroll方法 移动距离大于四分之一将会关闭否则弹回
      if (mMoveLeft &amp;gt;= (mContentWidth / 4)) {
          //划出屏幕
          isClose = true;
          mViewDragHelper.settleCapturedViewAt(mContentWidth, releasedChild.getTop());
       } else {
           //返回原来位置
            isClose = false;
            mViewDragHelper.settleCapturedViewAt(0, releasedChild.getTop());
            }
            invalidate();
       }

      @Override
      public int clampViewPositionHorizontal(View child, int left, int dx) {
         return Math.min(mContentWidth, Math.max(left, 0));
      }

      @Override
         public int getViewHorizontalDragRange(View child) {
         return mContentWidth;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;设置滑动的区域和手指离开屏幕后的处理&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    @Override
    public void computeScroll() {
        super.computeScroll();
        if (mViewDragHelper != null &amp;amp;&amp;amp; mViewDragHelper.continueSettling(true)) {
            invalidate();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;计算根据抬手后的位置滑动到需要滑动的位置，并刷新&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    backLayout.setDragCallBack(new SwipeBackLayout.DragCallBack() {
            @Override
            public void onDrag() {
                finish();
            }
     });
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;处理回调，结束当前页面&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最后Activity主题添加
&lt;code&gt;
&amp;lt;item name=&amp;quot;android:windowIsTranslucent&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt;
&amp;lt;item name=&amp;quot;android:windowBackground&amp;quot;&amp;gt;@android:color/transparent&amp;lt;/item&amp;gt;
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;显示就没有白色背景了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;效果图&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../fostion_result1.jpg&#34; alt=&#34;xiaoguotupian&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>